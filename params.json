{"name":"Savvy","tagline":"An easy-to-use framework for HTML-based app development (tablet, smart phone, smart TV or web).","body":"#Savvy#\r\n\r\nSavvy is an easy-to-use framework for developing single-page HTML5 applications. It is intended for development of tablet, smart phone and smart TV apps, but it can also be used on websites.\r\n\r\nSavvy emphasises HTML, CSS and JavaScript as distinct technologies and employs a [Model-View-Presenter](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter)-style paradigm for app development.\r\n\r\nAlongside HTML, CSS and JavaScript, Savvy can parse [JSON](http://www.json.org/) (and [JXON](https://developer.mozilla.org/en-US/docs/JXON)) data models right out of the box.\r\n\r\n##Project structure##\r\n\r\nSavvy apps follow a straight-forward project structure based on the [HTML5 Boilerplate](http://html5boilerplate.com/).\r\n\r\nThe app is defined in `data/app.xml` (mandatory). Conventionally, other files are organised in directories as follows:\r\n\r\n- `css/`: CSS snippets (including a `libs` directory for third-party CSS libraries)\r\n- `html/`: HTML snippets used by the Savvy framework\r\n- `js/`: JavaScript snippets (including a `libs` directory also)\r\n- `assets/`: Image, audio, video and other media files\r\n- `data/`: JSON or JXON models (including `app.xml`, which defines the app)\r\n\r\n##Composing screens##\r\n\r\nSavvy apps are composed of desecrate screens. Each screen is composed of any number of HTML, CSS and JavaScript snippets. These screens are defined in `data/app.xml`. One of these screen MUST be the default screen.\r\n\r\nAdditionally, apps may be composed of any number of \"global\" HTML, CSS, JavaScript snippets (including external libraries) as well as data that persists across screens. The \"global\" elements of an app are also defined in `data/app.xml`.\r\n\r\n###`app.xml`###\r\n\r\nThe essential layout of `app.xml` is as follows:\r\n\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n    <app cache=\"auto\">\r\n      <screens>\r\n        <!-- screens are defined here -->\r\n      </screen>\r\n      <!-- global HTML, CSS, JSON and JavaScript is defined here -->\r\n    </app>\r\n\r\nWithin the `<screens>` tag, individual screens are defined using the following pattern:\r\n\r\n    <screen id=\"MainMenu\" title=\"Main Menu\" default=\"yes\">\r\n      <html>html/menu.html</html>\r\n      <css>css/menu.css</css>\r\n      <js>js/menu.js</js>\r\n    </screen>\r\n\r\nEach `<screen>` MUST have an `id` attribute. The value of the `id` attribute MUST be a valid JavaScript identifier, it MUST be unique and MUST NOT conflict with any other object in the scope of the JavaScript `window` object.\r\n\r\nEach `<screen>` SHOULD have a `title` attribute. The value of the `title` attribute will be set assigned to `window.title` when the screen is loaded.\r\n\r\nExactly one `<screen>` MUST be have a `default` attribute with a value of `yes`. The default screen will be displayed when the application starts.\r\n\r\n###Code snippets###\r\n\r\nScreens are composed of any number of HTML, CSS and JavaScript code snippets. The path to these snippet files MUST be indicated as EITHER an absolute path OR a relative path from the root directory of the Savvy project.\r\n\r\nA Savvy app MAY include any number of global HTML, CSS, JavaScript and JSON snippets. Example:\r\n\r\n    <html>html/global.html</html>\r\n    <css>css/styles.css</css>\r\n    <data>data/l10n.json</data>\r\n    <js>js/script.js</js>\r\n\r\n###Data files###\r\n\r\n`<data>` snippets MUST be [valid JSON](http://www.json.org/) (or [Algorithm #3-style JXON](https://developer.mozilla.org/en-US/docs/JXON)).\r\n\r\nData will be initialised to a child of the JavaScript `window` object. The name of this child MAY be indicated using the `name` attribute of the `<data>` element (e.g. <data name=\"myData\">path/to/data.json</data>`).\r\n\r\nIf no `name` attribute is provided, Savvy will initialise the data to an identifier based on the file name. For example, `<data>data/l10n.json</data>` will be initialised to `l10n`.\r\n\r\nIn either case, the identifier MUST be a valid JavaScript identifier and SHOULD not conflict with any other child of the JavaScript `window` object.\r\n\r\n##Moving between screens##\r\n\r\nThe primary means to navigate through the screens of a Savvy app is the `Savvy.go()` method:\r\n\r\n- `Savvy.go(String id)`: Loads a screen of ID `id`.\r\n\r\nFor example, the following JavaScript will load a screen with the ID of \"MainMenu\":\r\n\r\n    Savvy.go(\"MainMenu\");\r\n\r\nThe JavaScript `history` object can also be used to navigate between screens. For example, `history.back()` will navigate back one screen in the navigation history. Whereas, `history.forward(2)` will navigation forward two screens in the navigation history.\r\n\r\n###Screen life cycle###\r\n\r\nThe life cycle of a screen in Savvy can be monitored using three event:\r\n\r\n* Savvy.EXIT\r\n* Savvy.READY\r\n* Savvy.ENTER\r\n\r\n####Savvy.EXIT####\r\n\r\n`Savvy.EXIT` is fired when a screen transition is about called. It provides an opportunity for an app to perform clean-up or other operations before a transition occurs.\r\n\r\n####Savvy.READY####\r\n\r\n`Savvy.READY` is fired when a mid-point through the screen transition process. The old screen's JavaScript has been unlinked and the new screen's HTML and JavaScript has been added to the DOM and executed. However, the new screen is not visible. The old screen's HTML is still in the DOM and it's CSS is still live.\r\n\r\nThis event provides and opportunity for an app to preform preparatory operations with the new screen's HTML in the DOM and JavaScript fully linked but before the screen transition is finalised.\r\n\r\n####Savvy.ENTER####\r\n\r\n`Savvy.ENTER` is fired as the last step in a screen transition. It signals that the screen transition is complete and the new screen is visible to the user.\r\n\r\nAfter `Savvy.READY` is fired, the old screen's HTML and CSS is unloaded and the new screen's CSS is made live. The new screen is made visible, the window title is set to the new screen's title and the window location is set to Screen 2's ID (e.g. `http://www.example.com/!#/ScreenID`). Then `Savvy.ENTER` is fired.\r\n\r\n####Pausing transition####\r\n\r\nIf a `Savvy.EXIT` or `Savvy.READY` event message returns `false`, the screen transition will be paused at that step in the life cycle. This can be useful, for example, to wait until an AJAX call complete before continuing with the transition.\r\n\r\nTo continue the transition, call `Savvy.go()` without passing any parameters. Calling `Savvy.go(...)` with any the ID of another screen will cancel the transition and start a new one.\r\n\r\n###Event subscriptions###\r\n\r\n####Subscribing to events####\r\n\r\nMessages can be subscribed to from individual screens (in which case they will be unsubscribed from when the screen unloads) or they can be subscribed to using the `Savvy` object (in which case the subscription will persist across screens). In general, snippets of JavaScript that are used by screen should subscribe to messages using the former technique. Snippets of JavaScript that are \"global\" will always subscribe using the latter.\r\n\r\nThese can be subscribed to from an screen's JavaScript snippet as follows: \r\n\r\n    this.subscribe(Savvy.READY, function ready(){\r\n      // code goes here\r\n    });\r\n\r\n    this.subscribe(Savvy.ENTER, function(){\r\n      // code goes here\r\n    });\r\n\r\n    this.subscribe(Savvy.EXIT, function(){\r\n      // code goes here\r\n    })\r\n\r\nIn \"global\" JavaScript contexts, the Savvy object can subscribe to these events as follows:\r\n\r\n    Savvy.subscribe(Savvy.READY, function ready(){\r\n      // code goes here\r\n    });\r\n\r\n    Savvy.subscribe(Savvy.ENTER, function(){\r\n      // code goes here\r\n    });\r\n\r\n    Savvy.subscribe(Savvy.EXIT, function(){\r\n      // code goes here\r\n    })\r\n\r\n####Unsubscribing from events###\r\n\r\nTo unsubscribe from an event, call `Savvy.unsubscribe(...)` and pass the type of message to unsubscribe and the function that was subscribed. For example:\r\n\r\n    function callback(){\r\n      // fires at all \r\n    }\r\n\r\n    Savvy.subscribe(Savvy.ENTER, callback); // subscribe\r\n    Savvy.unsubscribe(Savvy.ENTER, callback); // unsubscribe\r\n\r\n###Accessing the DOM###\r\n\r\nSavvy provides two methods to access the DOM:\r\n\r\n`Savvy.getGlobal()` returns the HTML `div` element containing global HTML.\r\n\r\n`Savvy.getScreen()` returns the HTML `div` element containing the current screen's HTML. During a transition, this methods returns the new screen after the `Savvy.EXIT` message. is fired.\r\n\r\n##Screen objects##\r\n\r\nSavvy executes every screen's JavaScript snippet within an unique screen objects.\r\n\r\nThese objects are created new everytime a screen is loaded (immediately prior to Savvy.READY) and destroyed with a screen is unloaded (immediately after Savvy.EXIT).\r\n\r\n###Accessing screen objects###\r\n\r\nWhen a JavaScript snippet is executed within a screen object, the `this` keyword will ordinarily refer to the screen object. The screen object may also be accessed literally using the screen ID.\r\n\r\nFor example, for a screen with an ID \"MainMenu\", the screen object may be accessed in the following way:\r\n\r\n    this\r\n    MainMenu\r\n\r\nScreen objects are children of the JavaScript `window` object, so they can be accessed from \"global\" JavaScript (including in-line JavaScript on DOM elements) using the screen's ID.\r\n\r\n###Individual closures###\r\n\r\nWithin a screen object, individual JavaScript snippets have seperate [closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures).\r\n\r\nThis means that different scripts used on the same screen may contain identical identifiers for different variables (e.g. `myVar` in one JavaScript snippet will ordinarily be a different object to `myVar` in another snippet).\r\n\r\nHowever, this also means that in order to call a function or access an variable in one script from another, the functino or variable needs to be explicitly exposed.\r\n\r\nScript 1:\r\n\r\n    function hello(world) {\r\n      console.log(\"Hello, \" + world);\r\n    }\r\n\r\n    this.hello = hello;\r\n\r\nScript 2:\r\n\r\n    var world = \"Mars\";\r\n    this.hello(world); // Hello, Mars\r\n\r\n###`_screen` and `_global`###\r\n\r\nSavvy extends the JavaScript `window` object with two helper objects: `_screen` and `_global`.\r\n\r\n`_screen` is a reference to the current screen object. `_global` is a reference to the JavaScritpt `window` object (and is provided solely for syntatic consitency).\r\n\r\n`_screen` is set to the current screen object immediately after the `Savvy.EXIT` event.\r\n\r\n##Routing##\r\n\r\nThe Savvy framework includes automatic routing of URLs to specific screen within an app. URLs used by the Savvy framework follow a simple pattern:\r\n\r\n    http://www.example.com/path/to/savvy/#!/id/optional/further/path\r\n\r\nThe above URL would load a screen with the ID `id`.\r\n\r\nThe portion of the URL after `id` (i.e. `/optional/further/path`) is not used by the framework. However, it can be used applications to create REST-like URLs. For example, the following URL could be used to access a screen with the ID of `indox`. The application could then further interpret the URL to load the inbox of an individual user (`john`):\r\n\r\n    http://www.example.com/path/to/savvy/#!/inbox/john\r\n\r\nThe Savvy path of a screen, including the optional further path after the Savvy screen ID can be retrieved using `Savvy.getInfo()`. In the case of teh above example, this would return the following object:\r\n\r\n    {\r\n      id: \"inbox\",\r\n      title: \"Inbox\",\r\n      isDefault: false,\r\n      path: \"/inbox/john\"\r\n    }\r\n\r\n##License##\r\n\r\nThe Savvy framework is open source and released under the [MIT license](http://opensource.org/licenses/MIT). The [pirate image](http://thenounproject.com/noun/pirate/#icon-No13422) used by the project was designed by [Anne Caroline Bittencourt Gonçalves](http://thenounproject.com/anne1003) from The Noun Project.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}